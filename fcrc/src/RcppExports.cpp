// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// admm_grplasso_int
List admm_grplasso_int(mat const xty, mat const xtx, uvec const index, double const lambda, vec beta_start, vec u_start, bool const varying_rho, double rho, double const abs_tol, double const rel_tol, int const max_iter);
RcppExport SEXP _fcrc_admm_grplasso_int(SEXP xtySEXP, SEXP xtxSEXP, SEXP indexSEXP, SEXP lambdaSEXP, SEXP beta_startSEXP, SEXP u_startSEXP, SEXP varying_rhoSEXP, SEXP rhoSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat const >::type xty(xtySEXP);
    Rcpp::traits::input_parameter< mat const >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< uvec const >::type index(indexSEXP);
    Rcpp::traits::input_parameter< double const >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< vec >::type beta_start(beta_startSEXP);
    Rcpp::traits::input_parameter< vec >::type u_start(u_startSEXP);
    Rcpp::traits::input_parameter< bool const >::type varying_rho(varying_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double const >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< double const >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< int const >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(admm_grplasso_int(xty, xtx, index, lambda, beta_start, u_start, varying_rho, rho, abs_tol, rel_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// alm_cgl_int
List alm_cgl_int(vec const J, mat const K, mat const L, uvec const index, vec u, vec u_int, vec beta, double const lambda, double rho, double const max_rho, double gamma, bool const varying_gamma, double const eps, int const max_iter, int const max_iter_int, double const abs_tol_int, double const rel_tol_int);
RcppExport SEXP _fcrc_alm_cgl_int(SEXP JSEXP, SEXP KSEXP, SEXP LSEXP, SEXP indexSEXP, SEXP uSEXP, SEXP u_intSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP max_rhoSEXP, SEXP gammaSEXP, SEXP varying_gammaSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP max_iter_intSEXP, SEXP abs_tol_intSEXP, SEXP rel_tol_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec const >::type J(JSEXP);
    Rcpp::traits::input_parameter< mat const >::type K(KSEXP);
    Rcpp::traits::input_parameter< mat const >::type L(LSEXP);
    Rcpp::traits::input_parameter< uvec const >::type index(indexSEXP);
    Rcpp::traits::input_parameter< vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type u_int(u_intSEXP);
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double const >::type max_rho(max_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool const >::type varying_gamma(varying_gammaSEXP);
    Rcpp::traits::input_parameter< double const >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int const >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int const >::type max_iter_int(max_iter_intSEXP);
    Rcpp::traits::input_parameter< double const >::type abs_tol_int(abs_tol_intSEXP);
    Rcpp::traits::input_parameter< double const >::type rel_tol_int(rel_tol_intSEXP);
    rcpp_result_gen = Rcpp::wrap(alm_cgl_int(J, K, L, index, u, u_int, beta, lambda, rho, max_rho, gamma, varying_gamma, eps, max_iter, max_iter_int, abs_tol_int, rel_tol_int));
    return rcpp_result_gen;
END_RCPP
}
